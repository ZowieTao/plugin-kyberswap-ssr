// Code generated by goctl. DO NOT EDIT.

export interface AuthCodeRequest {}

export interface AuthCodeRequestParams {
  code: string;
}

export interface AuthCodeResponse {
  userId: string;
  address: string;
  channelId: string;
  serverId: string;
  starkKey: string;
}

export interface ValidateServerPermissionsRequest {}

export interface ValidateServerPermissionsRequestParams {
  serverId: string;
  userId: string;
  group: string;
  permissions: string;
}

export interface ValidateServerPermissionsResponse {
  allowed: string;
}

export interface ValidateChannelPermissionsRequest {}

export interface ValidateChannelPermissionsRequestParams {
  channelId: string;
  userId: string;
  group: string;
  permissions: string;
}

export interface ValidateChannelPermissionsResponse {
  allowed: string;
}

export interface NotificationContent {
  sender: string;
}

export interface NotifyRequest {
  channelId: string;
  title: string;
  content: string;
  jumpPath: string;
  receiverIds?: Array<string>; // when this parameter is not passed, everyone in the channel will be notified by default; otherwise, it will be notified by the specified user
}

export interface GetServerMemberRequest {}

export interface GetServerMemberRequestParams {
  serverId: string;
  userId: string;
}

export interface GetServerMemberResponse {
  profile: ServerMemberProfile;
  roles: Array<Role>;
}

export interface ServerMemberProfile {
  id: string;
  nickname: string;
  nicknameType: number;
  discriminator: string;
  avatar: string;
  avatarType: number;
  status: number;
  muteEndedAt: number;
  owner: boolean;
}

export interface GetServerRolesRequest {}

export interface GetServerRolesRequestParams {
  serverId: string;
}

export interface Role {
  id: string;
  name: string;
  priority: number;
  permissions: Permission;
  admin: boolean;
  intro: string;
  color: string;
}

export interface Permission {
  server: string;
  channel: string;
  membership: string;
  text: string;
  voice: string;
  announcement: string;
  forum: string;
  guide: string;
}

export interface GetServerGuardNetworksRequest {}

export interface GetServerGuardNetworksRequestParams {
  serverId: string;
}

export interface GuardNetwork {
  id: string;
  name: string;
}

export interface AppGuardPreset {
  networkId: string;
  name: string;
  symbol: string;
  decimals?: string;
  contractAddr: string;
  key?: string;
}

export interface AppGuard {
  id?: string;
  roleId: string;
  serverId: string;
  alias: string;
  type: number; // 1: ERC20BalanceOf, 2: ERC721BalanceOf, 3: ERC721MetadataField, 4: ERC721MBalanceOf, 5: ERC721MMetadaField
  preset: AppGuardPreset;
  operator: number; // 1: >, 2: >=, 3: <, 4: <=, 5: ==, 6: !=
  value: string;
  createdAt?: string;
}

export interface CreateServerAppGuardRequest {
  conditions: Array<AppGuard>;
}

export interface CreateServerAppGuardRequestParams {
  serverId: string;
  roleId: string;
}

export interface GetServerAppGuardRequest {}

export interface GetServerAppGuardRequestParams {
  serverId: string;
  roleId: string;
}

export interface DeleteServerAppGuardRequest {}

export interface DeleteServerAppGuardRequestParams {
  serverId: string;
  roleId: string;
  id: string;
}

export interface CreateServerGuardInvocationRequest {
  userIDs: Array<string>;
}

export interface CreateServerGuardInvocationRequestParams {
  serverId: string;
}
